<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/18/hello-world/</url>
    <content><![CDATA[<p>this is my frist program  </p>
<h2 id="Welcome-！"><a href="#Welcome-！" class="headerlink" title="Welcome ！"></a>Welcome ！</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>build_vnc</title>
    <url>/2022/03/25/build-vnc/</url>
    <content><![CDATA[<h1 id="虚拟网络计算VNC的安装与配置"><a href="#虚拟网络计算VNC的安装与配置" class="headerlink" title="虚拟网络计算VNC的安装与配置"></a>虚拟网络计算VNC的安装与配置</h1><h2 id="1-切换用户为Root"><a href="#1-切换用户为Root" class="headerlink" title="1 切换用户为Root"></a>1 切换用户为Root</h2><p>执行如下命令将当前用户切换至Root用户</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure>

<p>执行完毕以后，原来的ubuntu用户会切换成root，如下图所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/igj3qn1h6v.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="2-更新获取软件及版本信息"><a href="#2-更新获取软件及版本信息" class="headerlink" title="2 更新获取软件及版本信息"></a>2 更新获取软件及版本信息</h2><p>执行如下命令来更新获取最新的软件及版本信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<p>执行完毕以后，如下所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/evnno0b6zq.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="3-安装VNC4Server"><a href="#3-安装VNC4Server" class="headerlink" title="3 安装VNC4Server"></a>3 安装VNC4Server</h2><p>通过执行如下命令来安装VNC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">apt-get install vnc4server</span><br></pre></td></tr></table></figure>

<p>执行完毕，如下图所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/in2iv6eus9.png?imageView2/2/w/1620" alt="img"></p>
<p>在Do you want to Continue？【Y/n】处，我们选择Y，并按回车继续</p>
<p>安装完毕以后，如下图所示：</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/kgliyfif39.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="4-启动VNC"><a href="#4-启动VNC" class="headerlink" title="4 启动VNC"></a>4 启动VNC</h2><p>我们那执行如下命令启动VNC服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>启动完毕如下所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/yhmre3rbck.png?imageView2/2/w/1620" alt="img"></p>
<p>设置VNC的密码</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/1kdp4jbljv.png?imageView2/2/w/1620" alt="img"></p>
<p>当我们看到New ‘VM-32-4-ubuntu:1 (root)’ desktop is VM-32-4-ubuntu:1字样的时候，说明启动成功。</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/hl4n7vbd9q.png?imageView2/2/w/1620" alt="img"></p>
<hr>
<h1 id="Gnome-桌面环境安装与配置"><a href="#Gnome-桌面环境安装与配置" class="headerlink" title="Gnome 桌面环境安装与配置"></a>Gnome 桌面环境安装与配置</h1><h2 id="1-Gnome-桌面简介"><a href="#1-Gnome-桌面简介" class="headerlink" title="1 Gnome 桌面简介"></a>1 Gnome 桌面简介</h2><blockquote>
<p> GNOME是一套<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E7%BA%AF%E7%B2%B9/2478">纯粹</a>自由的计算机软件，运行在<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>上，提供图形<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/3373875">桌面环境</a>。 GNOME 包含了 Panel （用来启动此程式和显示目前的状态）、桌面 （应用程式和资料放置的地方）及一系列的标准桌面工具和应用程式，并且能让各个应用程式都能正常地运作。 GNOME是Linux<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>上最常用的图形桌面环境之一。 </p>
</blockquote>
<h2 id="4-2-安装X-windows的基础"><a href="#4-2-安装X-windows的基础" class="headerlink" title="4.2 安装X-windows的基础"></a>4.2 安装X-windows的基础</h2><p><strong>①</strong>执行如下命令来去安装X-windows的基础</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get install x-<span class="variable language_">window</span>-system-core</span><br></pre></td></tr></table></figure>

<p><strong>②</strong>在Do you want to Continue？【Y/n】处，我们选择Y，并按回车继续</p>
<p><strong>③</strong>安装完毕以后，如下所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/p82zu96rc3.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="3安装登录管理器"><a href="#3安装登录管理器" class="headerlink" title="3安装登录管理器"></a>3安装登录管理器</h2><p><strong>①</strong>执行如下命令安装登陆管理器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdm3</span><br></pre></td></tr></table></figure>

<p><strong>②</strong>在Do you want to Continue？【Y/n】处，我们选择Y，并按回车继续</p>
<p><strong>③</strong>安装完毕，如下图所示 </p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/wdd2st2uxr.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="4-安装Ubuntu的桌面"><a href="#4-安装Ubuntu的桌面" class="headerlink" title="4 安装Ubuntu的桌面"></a>4 安装Ubuntu的桌面</h2><p>①执行如下命令安装 ubuntu-desktop 应用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ubuntu-desktop</span><br></pre></td></tr></table></figure>

<p><strong>②</strong>在Do you want to Continue？【Y/n】处，我们选择Y，并按回车继续</p>
<h2 id="4-5-安装Gnome相关配套软件"><a href="#4-5-安装Gnome相关配套软件" class="headerlink" title="4.5 安装Gnome相关配套软件"></a>4.5 安装Gnome相关配套软件</h2><p>执行如下命令安装Gnome相关配套软件 <strong>①</strong>执行命令如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal</span><br></pre></td></tr></table></figure>

<p><strong>②</strong>在Do you want to Continue？【Y/n】处，我们选择Y，并按回车继续</p>
<p><strong>③</strong>如下图所示，已经成功安装完毕</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/dg8a3zm0x8.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="6-修改VNC配置文件"><a href="#6-修改VNC配置文件" class="headerlink" title="6 修改VNC配置文件"></a>6 修改VNC配置文件</h2><p><strong>①</strong>修改/.vnc/xstartup中的文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vi ~<span class="regexp">/.vnc/</span>xstartup</span><br></pre></td></tr></table></figure>

<p>将配置文件修改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/bin/</span>sh</span><br><span class="line"># <span class="title class_">Uncomment</span> the following two lines <span class="keyword">for</span> normal <span class="attr">desktop</span>:</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">XKL_XMODMAP_DISABLE</span>=<span class="number">1</span></span><br><span class="line"> unset <span class="variable constant_">SESSION_MANAGER</span></span><br><span class="line"># exec /etc/<span class="variable constant_">X11</span>/xinit/xinitrc</span><br><span class="line">unset <span class="variable constant_">DBUS_SESSION_BUS_ADDRESS</span></span><br><span class="line">gnome-panel &amp;</span><br><span class="line">gnome-settings-daemon &amp;</span><br><span class="line">metacity &amp;</span><br><span class="line">nautilus &amp;</span><br><span class="line">gnome-terminal &amp;</span><br></pre></td></tr></table></figure>

<p>修改完毕，如下图所示 </p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/jt1i97qjds.png?imageView2/2/w/1620" alt="img"></p>
<p><strong>②</strong>修改完毕以后，按:wq键进行保存</p>
<h2 id="7-重启桌面进程"><a href="#7-重启桌面进程" class="headerlink" title="7 重启桌面进程"></a>7 重启桌面进程</h2><p><strong>①</strong>杀掉原桌面进程，输入命令（其中的:1是桌面号）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vncserver -kill :<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong>②</strong>输入以下命令生成新的会话：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vncserver :<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>执行成功以后，如下图所示</p>
<p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/6dszkqfswp.png?imageView2/2/w/1620" alt="img"></p>
<h1 id="本地使用VNC连接"><a href="#本地使用VNC连接" class="headerlink" title="本地使用VNC连接"></a>本地使用VNC连接</h1><h2 id="1-下载VNC-Viewer"><a href="#1-下载VNC-Viewer" class="headerlink" title="1 下载VNC Viewer"></a>1 下载VNC Viewer</h2><p><img src="https://ask.qcloudimg.com/http-save/yehe-1359560/p929x5fkvw.png?imageView2/2/w/1620" alt="img"></p>
<h2 id="2连接VNC"><a href="#2连接VNC" class="headerlink" title="2连接VNC"></a>2连接VNC</h2><p>① 在VNC Viewer 软件中，输入对应的公网IP地址:1 的方式进行连接</p>
<p>②点击”Continue”选项</p>
<p>③再此输入之前设置的VNC的密码，并点击“OK”进行下一步</p>
]]></content>
  </entry>
  <entry>
    <title>使用QT编写的代码编辑器</title>
    <url>/2022/03/18/codeedit/</url>
    <content><![CDATA[<p>使用QT编写的代码编辑器,采用MVC模式架构，数据与代码分离</p>
<span id="more"></span>

<h3 id="使用QT编写的代码编辑器"><a href="#使用QT编写的代码编辑器" class="headerlink" title="使用QT编写的代码编辑器"></a>使用QT编写的代码编辑器</h3><p>界面展示</p>
<p><img src="/2022/03/18/codeedit/main.png"></p>
<p>核心编辑框使用外部库QScilllina</p>
<p>采用MVC模式架构，数据与代码分离</p>
<p>TreeMenu实现不同Item映射不同菜单</p>
<p><img src="/2022/03/18/codeedit/code.png"></p>
]]></content>
  </entry>
  <entry>
    <title>pinn相关研究与研究进展</title>
    <url>/2022/03/18/pinn/</url>
    <content><![CDATA[<p>pinn相关研究与研究进展,相关论文总结与文献综述</p>
<span id="more"></span>

<h1 id="pinn求解非线性PDE"><a href="#pinn求解非线性PDE" class="headerlink" title="pinn求解非线性PDE"></a>pinn求解非线性PDE</h1><h2 id="引入相关库文件"><a href="#引入相关库文件" class="headerlink" title="引入相关库文件"></a>引入相关库文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.set_default_tensor_type(torch.DoubleTensor)</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="构造网络"><a href="#构造网络" class="headerlink" title="构造网络"></a>构造网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承torch的nn模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化构造函数</span></span><br><span class="line">    <span class="comment"># hidden_num:   隐藏层数量</span></span><br><span class="line">    <span class="comment"># vertices_num: 每层神经元个数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hidden_num, vertices_num</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输入层</span></span><br><span class="line">        self.input_layer = nn.Linear(<span class="number">2</span>, vertices_num)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 隐藏层</span></span><br><span class="line">        self.hidden_layers = nn.ModuleList([nn.Linear(vertices_num, vertices_num) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(hidden_num)])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出层</span></span><br><span class="line">        self.output_layer = nn.Linear(vertices_num, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        o = self.act(self.input_layer(x))</span><br><span class="line">        <span class="keyword">for</span> i, li <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.hidden_layers):</span><br><span class="line">            o = self.act(li(o))</span><br><span class="line">        out = self.output_layer(o)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 激活函数:反正切</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">act</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> x * torch.sigmoid(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置加速器:Adam</span></span><br><span class="line">    <span class="comment"># lr: 误差控制</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_optimizer</span>(<span class="params">self, lr</span>):</span><br><span class="line">        <span class="keyword">return</span> torch.optim.Adam(self.parameters(), lr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loss = nn.MSELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="损失函数构造"><a href="#损失函数构造" class="headerlink" title="损失函数构造"></a>损失函数构造</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 求偏导函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradients</span>(<span class="params">u, x, order=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">if</span> order == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> torch.autograd.grad(u, x, grad_outputs=torch.ones_like(u),</span><br><span class="line">                                   create_graph=<span class="literal">True</span>,</span><br><span class="line">                                   only_inputs=<span class="literal">True</span>, )[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gradients(gradients(u, x), x, order=order - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interior</span>(<span class="params">size=<span class="number">2000</span></span>):</span><br><span class="line">    x = -<span class="number">1</span> + <span class="number">2</span> * torch.rand(size, <span class="number">1</span>)</span><br><span class="line">    t = torch.rand(size, <span class="number">1</span>)</span><br><span class="line">    cond = torch.zeros(size, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x.requires_grad_(<span class="literal">True</span>), t.requires_grad_(<span class="literal">True</span>), cond.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boundary2</span>(<span class="params">size=<span class="number">2000</span></span>):</span><br><span class="line">    x = <span class="number">1</span> - <span class="number">2</span> * torch.ones(size, <span class="number">1</span>)</span><br><span class="line">    t = torch.rand(size, <span class="number">1</span>)</span><br><span class="line">    cond = torch.zeros(size, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> x.requires_grad_(<span class="literal">True</span>), t.requires_grad_(<span class="literal">True</span>), cond.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boundary1</span>(<span class="params">size=<span class="number">2000</span></span>):</span><br><span class="line">    x = torch.ones(size, <span class="number">1</span>)</span><br><span class="line">    t = torch.rand(size, <span class="number">1</span>)</span><br><span class="line">    cond = torch.zeros(size, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x.requires_grad_(<span class="literal">True</span>), t.requires_grad_(<span class="literal">True</span>), cond.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initial_value</span>(<span class="params">size=<span class="number">2000</span></span>):</span><br><span class="line">    x = torch.rand(size, <span class="number">1</span>)</span><br><span class="line">    t = torch.zeros(size, <span class="number">1</span>)</span><br><span class="line">    cond = -torch.sin(np.pi * x)</span><br><span class="line">    <span class="keyword">return</span> x.requires_grad_(<span class="literal">True</span>), t.requires_grad_(<span class="literal">True</span>), cond.requires_grad_(<span class="literal">True</span>).requires_grad_(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss_interior</span>(<span class="params">net</span>):</span><br><span class="line">    x, t, cond = interior()</span><br><span class="line">    uxy = net(torch.cat([x, t], dim=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> loss(gradients(uxy, t, <span class="number">1</span>) + gradients(uxy, x, <span class="number">1</span>) * uxy - (<span class="number">0.01</span> / np.pi) * gradients(uxy, x, <span class="number">2</span>), cond)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss_boundary2</span>(<span class="params">net</span>):</span><br><span class="line">    x, t, cond = boundary2()</span><br><span class="line">    uxy = net(torch.cat([x, t], dim=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> loss(uxy, cond)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss_boundary1</span>(<span class="params">net</span>):</span><br><span class="line">    x, t, cond = boundary1()</span><br><span class="line">    uxy = net(torch.cat([x, t], dim=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> loss(uxy, cond)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss_initial_value</span>(<span class="params">net</span>):</span><br><span class="line">    x, t, cond = initial_value()</span><br><span class="line">    uxy = net(torch.cat([x, t], dim=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> loss(uxy, cond)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = Net(<span class="number">10</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">loss_data = []</span><br><span class="line"></span><br><span class="line">opt = torch.optim.Adam(params=net.parameters(), lr=<span class="number">1e-7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    opt.zero_grad()</span><br><span class="line">    l = loss_interior(net) + loss_boundary1(net) + loss_initial_value(net) + loss_boundary2(net)</span><br><span class="line">    l.backward()</span><br><span class="line">    opt.step()</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(l.item())</span><br><span class="line">    loss_data.append([i, l.item()])</span><br><span class="line"></span><br><span class="line">torch.save(net, <span class="string">&#x27;./data/net.pkl&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>$$<br>\displaystyle<br>        \left{\begin{array}{c}</p>
<pre><code>        \frac&#123;\partial C&#125;&#123;\partial t&#125;=D \frac&#123;\partial^&#123;2&#125; C&#125;&#123;\partial x^&#123;2&#125;&#125; ;(0&lt;x&lt;1, t&gt;0) 
        \\
        \frac&#123;\partial C&#125;&#123;\partial x&#125;(0, t)=\pi e^&#123;-\pi^&#123;2&#125; t&#125; \cos (\pi x) 
        \\ 
        C(l, t)=0 ;(0 \leq x \leq 1) 
        \\
        C(x, 0)=\sin (\pi x) ;(t \geq 0)
    \end&#123;array&#125;\right.
</code></pre>
<p>$$</p>
]]></content>
      <tags>
        <tag>pinn</tag>
      </tags>
  </entry>
  <entry>
    <title>mainpage</title>
    <url>/2022/03/18/mainpage/</url>
    <content><![CDATA[<p>记录一些常见的latex公式，方便书写</p>
<span id="more"></span>

<h3 id="1-数学公式"><a href="#1-数学公式" class="headerlink" title="1.数学公式"></a>1.数学公式</h3><table>
<thead>
<tr>
<th>符号</th>
<th>公式</th>
<th></th>
<th>符号</th>
<th>公式</th>
</tr>
</thead>
<tbody><tr>
<td>\int</td>
<td>$\int$</td>
<td></td>
<td>a_1</td>
<td>$a_1$</td>
</tr>
<tr>
<td>\iint</td>
<td>$\iint$</td>
<td></td>
<td>a^2</td>
<td>$a^2$</td>
</tr>
<tr>
<td>\iiint</td>
<td>$\iiint$</td>
<td></td>
<td>\bar{x}</td>
<td>$\bar{x}$</td>
</tr>
<tr>
<td>\lim</td>
<td>$\lim_{n =1}$</td>
<td></td>
<td>\vec{x}</td>
<td>$\vec{x}$</td>
</tr>
<tr>
<td>\lim\limits_{n = 1}</td>
<td>$\lim\limits_{n=1}$</td>
<td></td>
<td>\dots</td>
<td>$x_1,x_2,\dots,x_n$</td>
</tr>
<tr>
<td>\sum</td>
<td>$\sum$</td>
<td></td>
<td>\cdots</td>
<td>$x_1,x_2,\cdots,x_n$</td>
</tr>
<tr>
<td>\prod</td>
<td>$\prod$</td>
<td></td>
<td>\ddots</td>
<td>$x_1,x_2,\ddots,x_n$</td>
</tr>
<tr>
<td>\sum\limits_{n = 1}^{\infty}</td>
<td>$\sum\limits_{n = 1}^{\infty}$</td>
<td></td>
<td>\vdots</td>
<td>$x_1,x_2,\vdots,x_n$</td>
</tr>
<tr>
<td>\dfrac{f(x)}{g(x)}</td>
<td>$\dfrac{f(x)}{g(x)}$</td>
<td></td>
<td>矩阵</td>
<td>$\begin{array}{12}x_1&amp;x_2&amp;\dots\x_3&amp;x_4&amp;\dots\\vdots&amp;\vdots&amp;\ddots\end{array}$</td>
</tr>
<tr>
<td>\tfrac{f(x)}{g(x)}(默认)</td>
<td>$\tfrac{f(x)}{g(x)}$</td>
<td></td>
<td>矩阵</td>
<td>$\begin{pmatrix} a &amp; b\ c &amp; d \ \end{pmatrix} \quad  \quad \begin{Bmatrix} a &amp; b \ c &amp; d\ \end{Bmatrix}\quad \begin{vmatrix} a &amp; b \ c &amp; d \ \end{vmatrix}\quad \begin{Vmatrix} a &amp; b\ c &amp; d \ \end{Vmatrix}$</td>
</tr>
<tr>
<td>\boxed{a}</td>
<td>$\boxed{a}$</td>
<td></td>
<td>\quad</td>
<td>$a\quad b$</td>
</tr>
<tr>
<td>\sqrt[n]{x}</td>
<td>$\sqrt[n]{x}$</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>split对齐</th>
<th align="right">$\begin{split}f(x)=&amp;ax^2+bx+c\&amp;dy^2+fy+e\end{split}$</th>
</tr>
</thead>
<tbody><tr>
<td>case</td>
<td align="right">$\begin{cases}f(x)=ax^2+bx+c\g(x)=dy^2+fy+e\end{cases}$</td>
</tr>
<tr>
<td>align对齐</td>
<td align="right">$\begin{align}f(x)=&amp;ax^2+bx+c\g(x)=&amp;dy^2+fy+e\end{align}$</td>
</tr>
<tr>
<td>array</td>
<td align="right">$\begin{array}{12}x_1&amp;x_2&amp;\dots\x_3&amp;x_4&amp;\dots\\vdots&amp;\vdots&amp;\ddots\end{array}$</td>
</tr>
</tbody></table>
<p><img src="/2022/03/18/mainpage/QQ%E6%88%AA%E5%9B%BE20200304195537.png"></p>
]]></content>
      <tags>
        <tag>main</tag>
      </tags>
  </entry>
</search>
